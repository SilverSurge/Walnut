---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init
data:
  init.sql: |
    -- key value store
    CREATE TABLE IF NOT EXISTS kvs (
        key TEXT PRIMARY KEY,
        value TEXT NOT NULL,
        updated_at TIMESTAMP DEFAULT NOW(),
        request_id UUID UNIQUE NOT NULL
    );

    -- key value store outbox
    CREATE TABLE IF NOT EXISTS kvs_outbox (
        id UUID PRIMARY KEY,
        key TEXT NOT NULL,
        value TEXT NOT NULL,
        status TEXT NOT NULL DEFAULT 'pending',
        created_at TIMESTAMP DEFAULT NOW()
    );

    CREATE UNIQUE INDEX  idx_outbox_id ON kvs_outbox(id);
    CREATE INDEX IF NOT EXISTS idx_outbox_status ON kvs_outbox (status);
    CREATE INDEX idx_outbox_created_at ON kvs_outbox (created_at);

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: pgbouncer-config
data:
  pgbouncer.ini: |
    [databases]
    walnut = host=postgres port=5432 dbname=walnut user=uadmin password=padmin

    [pgbouncer]
    listen_port = 6432
    listen_addr = 0.0.0.0
    auth_type = md5
    auth_file = /etc/pgbouncer/userlist.txt
    pool_mode = transaction
    max_client_conn = 10000
    default_pool_size = 50
    reserve_pool_size = 10

  userlist.txt: |
    "uadmin" "padmin"
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
spec:
  selector:
    app: postgres
  ports:
    - port: 5432
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
spec:
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: postgres:16
          env:
            - name: POSTGRES_USER
              value: uadmin
            - name: POSTGRES_PASSWORD
              value: padmin
            - name: POSTGRES_DB
              value: walnut
          volumeMounts:
            - name: pgdata
              mountPath: /var/lib/postgresql/data
            - name: initdb
              mountPath: /docker-entrypoint-initdb.d
      volumes:
        - name: pgdata
          emptyDir: {}
        - name: initdb
          configMap:
            name: postgres-init
            items:
              - key: init.sql
                path: init.sql
---
apiVersion: v1
kind: Service
metadata:
  name: pgbouncer
spec:
  selector:
    app: pgbouncer
  ports:
    - port: 6432
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pgbouncer
spec:
  selector:
    matchLabels:
      app: pgbouncer
  template:
    metadata:
      labels:
        app: pgbouncer
    spec:
      containers:
        - name: pgbouncer
          image: edoburu/pgbouncer
          env:
            - name: DB_USER
              value: uadmin
            - name: DB_PASSWORD
              value: padmin
            - name: DB_HOST
              value: postgres
          volumeMounts:
            - name: pgbconfig
              mountPath: /etc/pgbouncer
      volumes:
        - name: pgbconfig
          configMap:
            name: pgbouncer-config
---
apiVersion: v1
kind: Service
metadata:
  name: kafka
spec:
  selector:
    app: kafka
  ports:
    - port: 9092
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka
spec:
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      hostname: kafka
      containers:
        - name: kafka
          image: confluentinc/cp-kafka:8.1.0
          env:
            - { name: KAFKA_NODE_ID, value: "1" }
            - { name: KAFKA_PROCESS_ROLES, value: "broker,controller" }
            - { name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP, value: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT" }
            - { name: KAFKA_LISTENERS, value: "PLAINTEXT://kafka:29092,CONTROLLER://kafka:29093,PLAINTEXT_HOST://0.0.0.0:9092" }
            - { name: KAFKA_ADVERTISED_LISTENERS, value: "PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092" }
            - { name: KAFKA_INTER_BROKER_LISTENER_NAME, value: "PLAINTEXT" }
            - { name: KAFKA_CONTROLLER_LISTENER_NAMES, value: "CONTROLLER" }
            - { name: KAFKA_CONTROLLER_QUORUM_VOTERS, value: "1@kafka:29093" }
            - { name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR, value: "1" }
            - { name: KAFKA_JMX_PORT, value: "9101" }
            - { name: KAFKA_JMX_HOSTNAME, value: "localhost" }
            - { name: CLUSTER_ID, value: "7d33fcf5089e470a964b8e7bf8408bbe" }
          volumeMounts:
            - name: kafkadata
              mountPath: /var/lib/kafka/data
      volumes:
        - name: kafkadata
          emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  name: adminer
spec:
  type: NodePort
  selector:
    app: adminer
  ports:
    - port: 8080
      nodePort: 30080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: adminer
spec:
  selector:
    matchLabels:
      app: adminer
  template:
    metadata:
      labels:
        app: adminer
    spec:
      containers:
        - name: adminer
          image: adminer

---
apiVersion: v1
kind: Service
metadata:
  name: app
spec:
  type: NodePort
  selector:
    app: app
  ports:
    - port: 8000
      nodePort: 30000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app
spec:
  selector:
    matchLabels:
      app: app
  template:
    metadata:
      labels:
        app: app
    spec:
      containers:
        - name: app
          image: app:latest
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: worker
spec:
  selector:
    matchLabels:
      app: worker
  template:
    metadata:
      labels:
        app: worker
    spec:
      containers:
        - name: worker
          image: worker:latest
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cleanup
spec:
  selector:
    matchLabels:
      app: cleanup
  template:
    metadata:
      labels:
        app: cleanup
    spec:
      containers:
        - name: cleanup
          image: cleanup:latest
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: producer
spec:
  selector:
    matchLabels:
      app: producer
  template:
    metadata:
      labels:
        app: producer
    spec:
      containers:
        - name: producer
          image: producer:latest
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: consumer
spec:
  replicas: 2
  selector:
    matchLabels:
      app: consumer
  template:
    metadata:
      labels:
        app: consumer
    spec:
      containers:
        - name: consumer
          image: consumer:latest
